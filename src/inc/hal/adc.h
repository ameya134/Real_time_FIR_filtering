/* ********************************************************
 * Header file for ADC module
 *
 * Author:          Ameya Phadke
 * Date Created:	22nd March 2021
 * Date Modified:	14th May 2021
 * 
 * ********************************************************/

#ifndef _ADC_H
#define _ADC_H


#include "tm4c129encpdt.h"
#include "main.h"
#include "app.h"


/* macro for configuring dma for adc in ADC_init */
#define ADC_USE_DMA	1

#if( ADC_USE_DMA == 1)

#include "dma.h"

/* Channel no and peripheral encoding number
 * for ADC SS0 channel of uDMA */
#define ADC_DMA_CHANNEL_NO	14
#define ADC_DMA_CHANNEL_ENCODE	0

/* ADC SS0 interrupt number and interrupt priority */
#define ADC0_SS0_INT_NUM	14
#define ADC0_SS0_INT_NVIC_PRIO	configADC_INT_PRIO



/* ***********************************************************************************
 * 
 * This is the interrupt handler for ADC dma done interrupt.
 * 
 * param: void
 * 
 * return: void
 * 
 * brief: This interrupt handler responds to DMA done signal generated by the DMA
 * after the completion of transfer of fixed number of samples to input data buffers
 * as specified by the control word. The application makes use of a dual buffer logic.
 * When ADC and PWM modules are using buffer A the software processes the data in
 * input buffer B and stores the output in output buffer B and vice versa.
 * When a DMA done interrupt is generated the handler checks the adc_buf_var flag and
 * sets the DMA hardware to use the appropriate buffers for the next samples. After
 * starting the DMA transfers the application release the ADC_data_ready semaphore on
 * which the application task is pending.
 * 
 * ***********************************************************************************/
void ADC0_sequencer0_handler(void);

#endif


/* ******************************************************************************
 * 
 * This function initializes the ADC module.
 *
 * param: void
 * 
 * return: void
 * 
 * breif: This function enables the ADC module. It sets up the sample sequencer 0
 * (SS0) to sample the pin PE3 which is Analog Input pin 0 (AIN0). The ADC SS0 is 
 * triggered when timer0 generates timeout event. Hence the sampling frequency is
 * equal to the timer0 frequency.
 * 
 * uDMA for ADC SS0 is set. This generates an dma transfer request when the SS0
 * FIFO is half full. Also DMAdone interrupt is enabled by the ADC_USE_DMA macro.
 * This generates an interrupt when DMA is done transfering predetermined number
 * of samples to ADC buffer in memory. DMA initialization needs to be done
 * separately.
 * 
 * ADC analog clock is set to use the PLL hence PLL needs to configured 
 * before calling this function.
 * 
 * ******************************************************************************/
void ADC_init(void);


/* *******************************************************************************
 *
 * This function returns the sampled value from SS0 FIFO register
 * 
 * param: void
 * 
 * return uint16	12 bit sample value from SSO FIFO
 * 
 * brief: ADC SS0 stores its sampled values in SS0 FIFO. this
 * function reads the FIFO register and returns a 16 bit value
 * containing th 12 bit sample data.
 * 
 * *******************************************************************************/
uint16_t ADC_get_val(void);



#endif
